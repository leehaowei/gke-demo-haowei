# Cloud Build CI/CD Pipeline with dynamic Cloud Armor policy for Helm

steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker:latest'
    id: 'build-docker-image'
    args:
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/${_IMAGE_NAME}:${COMMIT_SHA}'
      - '.'

  # Step 2: Push Docker image
  - name: 'gcr.io/cloud-builders/docker:latest'
    id: 'push-docker-image'
    args:
      - 'push'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/${_IMAGE_NAME}:${COMMIT_SHA}'

  # Step 3: Authenticate to GKE
  - name: 'gcr.io/cloud-builders/gcloud:latest'
    id: 'get-gke-credentials'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - '${_CLUSTER_NAME}'
      - '--zone'
      - '${_CLUSTER_ZONE}'
      - '--project'
      - '${PROJECT_ID}'

  # Step 4: Install tools and deploy with Helm using dynamic policy
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'deploy-with-helm'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail

        echo "▶ Installing yq and Helm"
        curl -sLo /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64
        chmod +x /usr/local/bin/yq
        curl -sLo helm.tar.gz https://get.helm.sh/helm-v3.14.2-linux-amd64.tar.gz
        tar -xzf helm.tar.gz
        mv linux-amd64/helm /usr/local/bin/helm

        echo "▶ Downloading cloudarmor.json"
        gsutil cp gs://${PROJECT_ID}-infra-output/terraform/cloudarmor.json cloudarmor.json

        echo "▶ Extracting policy name"
        POLICY_NAME=$(yq e '.cloudarmor_policy_name.value' cloudarmor.json)

        echo "▶ Deploying via Helm with policy: $POLICY_NAME"
        helm upgrade --install nginx ./helm/nginx \
          --set ingress.enabled=true \
          --set ingress.host=staging.nginx.9young.xyz \
          --set ingress.annotations."kubernetes\.io/ingress\.class"=gce \
          --set ingress.annotations."networking\.gke\.io/security-policy"=$POLICY_NAME \
          --set image.repository=us-central1-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/${_IMAGE_NAME} \
          --set image.tag=${COMMIT_SHA}

        echo "✅ Deployment complete."

options:
  pool:
    name: 'projects/${PROJECT_ID}/locations/${_REGION}/workerPools/gke-deploy-private-pool'
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _AR_REPO_NAME: gke-nginx-demo
  _IMAGE_NAME: gke-nginx-demo
  _CLUSTER_NAME: demo
  _CLUSTER_ZONE: us-central1-a
  _REGION: us-central1
  _ENV: staging
